// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package generated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ExampleClient is the client API for Example service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExampleClient interface {
	// GetIoTData example of unary call, where client sends one request and server responds back with a request and call is closed.
	GetIoTData(ctx context.Context, in *GetIoTDataReq, opts ...grpc.CallOption) (*GetIoTDataRes, error)
	// GetIoTDataStream example of server stream, where client sends a request and server responds back with stream of data. Call remains open as long as server is sending the data, after which server closes the stream with NIL or EOF.
	GetIoTDataStream(ctx context.Context, in *GetIoTDataStreamReq, opts ...grpc.CallOption) (Example_GetIoTDataStreamClient, error)
	// GetIoTDataBiDiStream enables bi-directional stream to send and receive data from ThingWorx server. This is useful when you want to send data to ThingWorx server and receive data from ThingWorx server at the same time.
	GetIoTDataBiDiStream(ctx context.Context, opts ...grpc.CallOption) (Example_GetIoTDataBiDiStreamClient, error)
}

type exampleClient struct {
	cc grpc.ClientConnInterface
}

func NewExampleClient(cc grpc.ClientConnInterface) ExampleClient {
	return &exampleClient{cc}
}

func (c *exampleClient) GetIoTData(ctx context.Context, in *GetIoTDataReq, opts ...grpc.CallOption) (*GetIoTDataRes, error) {
	out := new(GetIoTDataRes)
	err := c.cc.Invoke(ctx, "/example.protobuf.Example/GetIoTData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleClient) GetIoTDataStream(ctx context.Context, in *GetIoTDataStreamReq, opts ...grpc.CallOption) (Example_GetIoTDataStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Example_ServiceDesc.Streams[0], "/example.protobuf.Example/GetIoTDataStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &exampleGetIoTDataStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Example_GetIoTDataStreamClient interface {
	Recv() (*GetIoTDataStreamRes, error)
	grpc.ClientStream
}

type exampleGetIoTDataStreamClient struct {
	grpc.ClientStream
}

func (x *exampleGetIoTDataStreamClient) Recv() (*GetIoTDataStreamRes, error) {
	m := new(GetIoTDataStreamRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *exampleClient) GetIoTDataBiDiStream(ctx context.Context, opts ...grpc.CallOption) (Example_GetIoTDataBiDiStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Example_ServiceDesc.Streams[1], "/example.protobuf.Example/GetIoTDataBiDiStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &exampleGetIoTDataBiDiStreamClient{stream}
	return x, nil
}

type Example_GetIoTDataBiDiStreamClient interface {
	Send(*GetIoTDataStreamReq) error
	Recv() (*GetIoTDataStreamRes, error)
	grpc.ClientStream
}

type exampleGetIoTDataBiDiStreamClient struct {
	grpc.ClientStream
}

func (x *exampleGetIoTDataBiDiStreamClient) Send(m *GetIoTDataStreamReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *exampleGetIoTDataBiDiStreamClient) Recv() (*GetIoTDataStreamRes, error) {
	m := new(GetIoTDataStreamRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ExampleServer is the server API for Example service.
// All implementations must embed UnimplementedExampleServer
// for forward compatibility
type ExampleServer interface {
	// GetIoTData example of unary call, where client sends one request and server responds back with a request and call is closed.
	GetIoTData(context.Context, *GetIoTDataReq) (*GetIoTDataRes, error)
	// GetIoTDataStream example of server stream, where client sends a request and server responds back with stream of data. Call remains open as long as server is sending the data, after which server closes the stream with NIL or EOF.
	GetIoTDataStream(*GetIoTDataStreamReq, Example_GetIoTDataStreamServer) error
	// GetIoTDataBiDiStream enables bi-directional stream to send and receive data from ThingWorx server. This is useful when you want to send data to ThingWorx server and receive data from ThingWorx server at the same time.
	GetIoTDataBiDiStream(Example_GetIoTDataBiDiStreamServer) error
	mustEmbedUnimplementedExampleServer()
}

// UnimplementedExampleServer must be embedded to have forward compatible implementations.
type UnimplementedExampleServer struct {
}

func (UnimplementedExampleServer) GetIoTData(context.Context, *GetIoTDataReq) (*GetIoTDataRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIoTData not implemented")
}
func (UnimplementedExampleServer) GetIoTDataStream(*GetIoTDataStreamReq, Example_GetIoTDataStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetIoTDataStream not implemented")
}
func (UnimplementedExampleServer) GetIoTDataBiDiStream(Example_GetIoTDataBiDiStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetIoTDataBiDiStream not implemented")
}
func (UnimplementedExampleServer) mustEmbedUnimplementedExampleServer() {}

// UnsafeExampleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExampleServer will
// result in compilation errors.
type UnsafeExampleServer interface {
	mustEmbedUnimplementedExampleServer()
}

func RegisterExampleServer(s grpc.ServiceRegistrar, srv ExampleServer) {
	s.RegisterService(&Example_ServiceDesc, srv)
}

func _Example_GetIoTData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIoTDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServer).GetIoTData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.protobuf.Example/GetIoTData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServer).GetIoTData(ctx, req.(*GetIoTDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Example_GetIoTDataStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetIoTDataStreamReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExampleServer).GetIoTDataStream(m, &exampleGetIoTDataStreamServer{stream})
}

type Example_GetIoTDataStreamServer interface {
	Send(*GetIoTDataStreamRes) error
	grpc.ServerStream
}

type exampleGetIoTDataStreamServer struct {
	grpc.ServerStream
}

func (x *exampleGetIoTDataStreamServer) Send(m *GetIoTDataStreamRes) error {
	return x.ServerStream.SendMsg(m)
}

func _Example_GetIoTDataBiDiStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExampleServer).GetIoTDataBiDiStream(&exampleGetIoTDataBiDiStreamServer{stream})
}

type Example_GetIoTDataBiDiStreamServer interface {
	Send(*GetIoTDataStreamRes) error
	Recv() (*GetIoTDataStreamReq, error)
	grpc.ServerStream
}

type exampleGetIoTDataBiDiStreamServer struct {
	grpc.ServerStream
}

func (x *exampleGetIoTDataBiDiStreamServer) Send(m *GetIoTDataStreamRes) error {
	return x.ServerStream.SendMsg(m)
}

func (x *exampleGetIoTDataBiDiStreamServer) Recv() (*GetIoTDataStreamReq, error) {
	m := new(GetIoTDataStreamReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Example_ServiceDesc is the grpc.ServiceDesc for Example service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Example_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "example.protobuf.Example",
	HandlerType: (*ExampleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetIoTData",
			Handler:    _Example_GetIoTData_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetIoTDataStream",
			Handler:       _Example_GetIoTDataStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetIoTDataBiDiStream",
			Handler:       _Example_GetIoTDataBiDiStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "example.proto",
}
